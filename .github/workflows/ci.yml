name: Github Actions CI

on:
  pull_request:
  push:
    branches:
      - master
      - develop
      - githubactions*
      - feature/**
      - fix/**
      - pr/**

env:
    B2_VARIANT: variant=release,debug

jobs:
  posix:
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: "COMMENT=C++03 TOOLSET=gcc,gcc-7 Job 0"
            buildtype: "boost"
            packages: "g++-7"
            packages_to_remove: ""
            os: "ubuntu-16.04"
            cxx: "g++"
            sources: ""
            llvm_os: ""
            llvm_ver: ""
            comment: "C++03"
            toolset: "gcc,gcc-7"
          - name: "COMMENT=C++11 TOOLSET=clang CXXSTD=11 Job 1"
            buildtype: "boost"
            packages: "g++-7"
            packages_to_remove: ""
            os: "ubuntu-16.04"
            cxx: "clang++"
            sources: ""
            llvm_os: ""
            llvm_ver: ""
            comment: "C++11"
            toolset: "clang"
            cxxstd: "11"
          - name: "COMMENT=valgrind TOOLSET=clang B2_VARIANT=var Job 2"
            buildtype: "boost"
            packages: "clang-5.0 libstdc++-7-dev valgrind"
            packages_to_remove: ""
            os: "ubuntu-16.04"
            container: "ubuntu:14.04"
            cxx: "clang++"
            sources: ""
            llvm_os: "trusty"
            llvm_ver: "5.0"
            comment: "valgrind"
            toolset: "clang"
            b2_variant: "variant=debug"
            testflags: "testing.launcher=valgrind"
          - name: "COMMENT=cppcheck Job 3"
            buildtype: "15edef0d20-06e41ec903"
            packages: "binutils-gold gdb libc6-dbg"
            packages_to_remove: ""
            os: "ubuntu-16.04"
            cxx: "g++"
            sources: ""
            llvm_os: ""
            llvm_ver: ""
            comment: "cppcheck"
          - name: "COMMENT=CodeCov TOOLSET=gcc-7 Job 4"
            buildtype: "15edef0d20-35de83136e"
            packages: "gcc-7 g++-7"
            packages_to_remove: ""
            os: "ubuntu-16.04"
            cxx: "g++"
            sources: ""
            llvm_os: ""
            llvm_ver: ""
            comment: "CodeCov"
            toolset: "gcc-7"

    runs-on: ${{ matrix.os }}
    container: ${{ matrix.container }}

    steps:
      - name: Check if running in container
        if: matrix.container != ''
        run: echo "GHA_CONTAINER=${{ matrix.container }}" >> $GITHUB_ENV
      - name: If running in container, upgrade packages
        if: matrix.container != ''
        run: |
            sudo apt-get -o Acquire::Retries=3 update && DEBIAN_FRONTEND=noninteractive apt-get -y install tzdata && apt-get -o Acquire::Retries=3 install -y sudo software-properties-common wget curl apt-transport-https make apt-file sudo unzip libssl-dev build-essential autotools-dev autoconf automake g++ libc++-helpers python python-pip ruby cpio gcc-multilib g++-multilib pkgconf python3 python3-pip ccache libpython-dev
            sudo apt-add-repository ppa:git-core/ppa
            sudo apt-get -o Acquire::Retries=3 update && apt-get -o Acquire::Retries=3 -y install git
            sudo python -m pip install --upgrade pip==20.3.4
            sudo /usr/local/bin/pip install cmake

      - uses: actions/checkout@v2

      - name: linux
        shell: bash
        env:
          CXX: ${{ matrix.cxx }}
          SOURCES: ${{ matrix.sources }}
          LLVM_OS: ${{ matrix.llvm_os }}
          LLVM_VER: ${{ matrix.llvm_ver }}
          PACKAGES: ${{ matrix.packages }}
          PACKAGES_TO_REMOVE: ${{ matrix.packages_to_remove }}
          JOB_BUILDTYPE: ${{ matrix.buildtype }}
          COMMENT: ${{ matrix.comment }}
          TOOLSET: ${{ matrix.toolset }}
          CXXSTD: ${{ matrix.cxxstd }}
          B2_VARIANT: ${{ matrix.b2_variant }}
          TESTFLAGS: ${{ matrix.testflags }}
          TRAVIS_BRANCH: ${{ github.base_ref }}
          TRAVIS_OS_NAME: "linux"
        run: |
          echo '==================================> SETUP'
          echo '==================================> PACKAGES'
          set -e
          if [ -n "$PACKAGES_TO_REMOVE" ]; then sudo apt-get purge -y $PACKAGES_TO_REMOVE; fi
          echo ">>>>> APT: REPO.."
          for i in {1..3}; do sudo -E apt-add-repository -y "ppa:ubuntu-toolchain-r/test" && break || sleep 2; done
          
          if test -n "${LLVM_OS}" ; then
              wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
              if test -n "${LLVM_VER}" ; then
                  sudo -E apt-add-repository "deb http://apt.llvm.org/${LLVM_OS}/ llvm-toolchain-${LLVM_OS}-${LLVM_VER} main"
              else
                  # Snapshot (i.e. trunk) build of clang
                  sudo -E apt-add-repository "deb http://apt.llvm.org/${LLVM_OS}/ llvm-toolchain-${LLVM_OS} main"
              fi
          fi
          echo ">>>>> APT: UPDATE.."
          sudo -E apt-get -o Acquire::Retries=3 update
          if test -n "${SOURCES}" ; then
              echo ">>>>> APT: INSTALL SOURCES.."
              for SOURCE in $SOURCES; do
                  sudo -E apt-add-repository ppa:$SOURCE
              done
          fi
          echo ">>>>> APT: INSTALL ${PACKAGES}.."
          sudo -E DEBIAN_FRONTEND=noninteractive apt-get -o Acquire::Retries=3 -y --no-install-suggests --no-install-recommends install ${PACKAGES}

          echo '==================================> INSTALL AND COMPILE'
          set -e
          set -x
          export TRAVIS_BUILD_DIR=$(pwd)
          export TRAVIS_BRANCH=${TRAVIS_BRANCH:-$(echo $GITHUB_REF | awk 'BEGIN { FS = "/" } ; { print $3 }')}
          export VCS_COMMIT_ID=$GITHUB_SHA
          export GIT_COMMIT=$GITHUB_SHA
          export REPO_NAME=$(basename $GITHUB_REPOSITORY)
          export USER=$(whoami)
          export CC=${CC:-gcc}
          export PATH=~/.local/bin:/usr/local/bin:$PATH

          if [ "$JOB_BUILDTYPE" == "boost" ]; then

          echo '==================================> INSTALL'

          export SELF=`basename $REPO_NAME`
          cd ..
          git clone -b $TRAVIS_BRANCH --depth 1 https://github.com/boostorg/boost.git boost-root
          cd boost-root
          git submodule update -q --init tools/boostdep
          git submodule update -q --init tools/build
          git submodule update -q --init tools/inspect
          cp -r $TRAVIS_BUILD_DIR/* libs/$SELF
          export BOOST_ROOT="`pwd`"
          export PATH="`pwd`":$PATH
          python tools/boostdep/depinst/depinst.py $SELF --include example
          ./bootstrap.sh
          ./b2 headers

          echo '==================================> SCRIPT'

          cd libs/$SELF
          ci/build.sh

          elif [ "$JOB_BUILDTYPE" == "15edef0d20-06e41ec903" ]; then

          echo '==================================> INSTALL'

          export SELF=`basename $REPO_NAME`
          cd ..
          git clone -b $TRAVIS_BRANCH --depth 1 https://github.com/boostorg/boost.git boost-root
          cd boost-root
          git submodule update -q --init tools/boostdep
          git submodule update -q --init tools/build
          git submodule update -q --init tools/inspect
          cp -r $TRAVIS_BUILD_DIR/* libs/$SELF
          export BOOST_ROOT="`pwd`"
          export PATH="`pwd`":$PATH
          python tools/boostdep/depinst/depinst.py $SELF --include example
          ./bootstrap.sh
          ./b2 headers

          echo '==================================> SCRIPT'

          libs/$SELF/ci/cppcheck.sh

          elif [ "$JOB_BUILDTYPE" == "15edef0d20-35de83136e" ]; then

          echo '==================================> INSTALL'

          export SELF=`basename $REPO_NAME`
          cd ..
          git clone -b $TRAVIS_BRANCH --depth 1 https://github.com/boostorg/boost.git boost-root
          cd boost-root
          git submodule update -q --init tools/boostdep
          git submodule update -q --init tools/build
          git submodule update -q --init tools/inspect
          cp -r $TRAVIS_BUILD_DIR/* libs/$SELF
          export BOOST_ROOT="`pwd`"
          export PATH="`pwd`":$PATH
          python tools/boostdep/depinst/depinst.py $SELF --include example
          ./bootstrap.sh
          ./b2 headers

          echo '==================================> SCRIPT'

          pushd /tmp && git clone https://github.com/linux-test-project/lcov.git && cd lcov && sudo make install && which lcov && lcov --version && popd
          cd libs/$SELF
          ci/codecov.sh

          fi
